#!/bin/bash

#    Vade - Tool for managing C/C++ source code using GNU Make
#    Copyright (C) 2017  Nicolas Sauzede <nsauzede@laposte.net>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

vadecalled=$_
#echo "Testing if script is being sourced.. _=${vadecalled} 0=$0 *=$*"
if [ $vadecalled == $0 ]; then

VADE_VERSION="0.0.9"

VADEBUILD="build"
VADECLEAN="clean"
VADEHELP="help"
VADENEW="new"
VADETEST="test"
VADEVERSION="version"
VADECMDS="$VADEBUILD $VADECLEAN $VADEHELP $VADENEW $VADETEST $VADEVERSION"

VADEBIN=$0
VADECMD=$1

if [ "x${VADECMD}" = "xcomplete" ]; then
    echo "$VADECMDS"
    exit 0
fi

#echo "Script is a subshell CMD=$VADECMD _=${vadecalled} 0=$0 *=$*"
#exit 0

VADEFULL=$(realpath `readlink ${VADEBIN} || echo ${VADEBIN}`)
VADEROOT=`dirname ${VADEFULL}`/..
#VADE=`basename ${VADEFULL}`
VADE=vade
VADEBINPATH=${VADEROOT}
#VADEBIN="$vadebin"
#VADEFULL="$vadefull"
#VADEROOT="$vaderoot"
#VADE="$vade"
#VADEBINPATH="$vaderoot"
VADEMAKEFILE=${VADEROOT}/Makefile

# If VADEPATH is not defined, try to autodetect..
# 1) try current git root, 2) try ${HOME}/git/ns_vade
: ${VADEPATH:=`git rev-parse --show-toplevel 2> /dev/null || echo ${HOME}/git/ns_vade`}
# Else 3) fallback to vade root itself.
if [ ! -d "${VADEPATH}" ]; then
    VADEPATH=${VADEROOT}
fi

#echo "VADEBIN=${VADEBIN}"
#echo "VADECMD=${VADECMD}"
#echo "VADEFULL=${VADEFULL}"
#echo "VADEROOT=${VADEROOT}"
#echo "VADE=${VADE}"
#echo "VADEBINPATH=${VADEBINPATH}"
#echo "VADEPATH=${VADEPATH}"

#SILENCEMAKE=-s
SILENCEMAKE=--no-print-directory

#if [ "x${VADECMD}" = "x${VADECOMPLETE}" ]; then
#    echo "${VADECMDS}"
#    exit 0
#elif [ "x${VADECMD}" != "x" ]; then
if [ "x${VADECMD}" != "x" ]; then
#    VADECMD="help"
#else
    shift
    VADESUBCMD=$1
    VADEARGS=$*
fi

#echo "VADESUBCMD=${VADESUBCMD}"
#echo "VADEARGS=${VADEARGS}"

case ${VADECMD} in
${VADEVERSION}) :
    echo "Vade version ${VADE_VERSION}"
    exit 0
    ;;
${VADENEW}) :
    if [ "x${VADESUBCMD}" == "x" ]; then
        echo "Package name required"
        exit 1
    fi
    PKG=${VADESUBCMD}
    PKGNAME=${PKG////_}
    PKGBASE=`basename ${PKG}`
    if [ "x${PKG}" == "xtest" ]; then
        echo "Package name 'test' is reserved"
        exit 1
    fi
    if [ -d ${VADEPATH}/vade/src/${PKG} ]; then
        echo "Package ${PKG} already exists (VADEPATH=${VADEPATH})"
        exit 1
    fi
    ;;
"" | ${VADEHELP}) :
    case ${VADESUBCMD} in
    "") :
        echo -e "Vade is a tool for managing gcc* source code. (*C, C++, assembly, etc..)"
        echo -e ""
        echo -e "Usage:"
        echo -e ""
        echo -e "\t${VADE} command [arguments]"
        echo -e ""
        echo -e "The commands are:"
        echo -e ""
        echo -e "\t${VADEHELP} [cmd]\tShow this help (or cmd help)"
        echo -e "\t${VADEVERSION}\t\tShow vade version"
        echo -e "\t${VADENEW}\t\tCreate a new source package"
        echo -e "\t${VADEBUILD}\t\tBuild packages"
        echo -e "\t${VADECLEAN}\t\tRemove build files"
        echo -e "\t${VADETEST}\t\tTest packages (default: all, or select a set by defining P)"
        echo -e ""
        if [ "x${VADECMD}" = "xhelp" ]; then
            exit 0
        else
            exit 2
        fi
        ;;
    ${VADENEW}) :
        echo "Usage: ${VADE} ${VADESUBCMD} <packagename>"
        echo ""
        exit 0
        ;;
    ${VADEBUILD}) :
        echo "Usage: ${VADE} ${VADESUBCMD} [-o output] [-i] [build flags] [packages]"
        echo ""
        exit 0
        ;;
    ${VADECLEAN}) :
        echo "Usage: ${VADE} ${VADESUBCMD} [-i] [-r] [-n] [-x] [build flags] [packages]"
        echo ""
        exit 0
        ;;
    ${VADETEST}) :
        echo "Usage: ${VADE} ${VADESUBCMD} [build/test flags] [P+=<pkg1> [P+=<pkg2>] ...]"
        echo ""
        exit 0
        ;;
    *) :
        echo "Unknown help topic `${VADESUBCMD}`.  Run '${VADE} help'."
        echo ""
        exit 2
        ;;
    esac
    ;;
esac

test -d ${VADEPATH} || (echo "can't load package: package .: no buildable source files in ${VADEPATH}" ; exit 1)

#echo "PKG=${PKG}"
#echo "PKGNAME=${PKGNAME}"
#echo "PKGBASE=${PKGBASE}"

case ${VADECMD} in
${VADENEW}) :
#    echo "MKDIR.."
    mkdir -p ${VADEPATH}/vade/src/${PKG}
#    echo "ECHO .h.."
    {
        echo "#ifndef ${PKGNAME^^}_H__"
        echo "#define ${PKGNAME^^}_H__"
        echo ""
        echo "int ${PKGNAME}_Mock();"
        echo ""
        echo "#endif/*${PKGNAME^^}_H__*/"
    } > ${VADEPATH}/vade/src/${PKG}/${PKGBASE}.h
#    echo "ECHO .c.."
    {
        echo '#include "'"${PKGBASE}.h"'"'
        echo ""
        echo "int ${PKGNAME}_Mock() {"
        echo "    return 42;"
        echo "}"
    } > ${VADEPATH}/vade/src/${PKG}/${PKGBASE}.c
#    echo "ECHO _test.c.."
    {
        echo '#include "'"${PKGBASE}.h"'"'
        echo ""
        echo '#include "'"test/test.h"'"'
        echo ""
        echo "TEST_F(${PKGNAME}, Mock) {"
        echo '    TEST_LOG("Testing '"${PKGNAME}"' Mock..\n");'
        echo "    EXPECT_EQ(42, ${PKGNAME}_Mock());"
        echo "}"
    } > ${VADEPATH}/vade/src/${PKG}/${PKGBASE}_test.c
    ;;
${VADEBUILD}) :
    make ${SILENCEMAKE} -C ${VADEPATH} -f ${VADEMAKEFILE} all ${VADEARGS} VADE_VERSION="${VADE_VERSION}"
    ;;
${VADECLEAN}) :
    make ${SILENCEMAKE} -C ${VADEPATH} -f ${VADEMAKEFILE} clobber ${VADEARGS} VADE_VERSION="${VADE_VERSION}"
    ;;
${VADETEST}) :
    make ${SILENCEMAKE} -C ${VADEPATH} -f ${VADEMAKEFILE} test ${VADEARGS} VADE_VERSION="${VADE_VERSION}"
    ;;
*) :
    echo "${VADE}: unknown command \"${VADECMD}\""
    echo "Run '${VADE} help' for usage."
    echo ""
    exit 2
    ;;
esac

#echo "Fall through to the end of file !"
else

#echo "Script is being sourced _=${vadecalled} 0=$0 *=$*"
#echo "\$BASH_SOURCE ${BASH_SOURCE[@]}"

vadebin=${BASH_SOURCE}
vadefull=$(realpath `readlink ${vadebin} || echo ${vadebin}`)
vaderoot=`dirname ${vadefull}`
#vade=`basename ${vadefull}`
vade=vade
vadebinpath=${vaderoot}

# add vade program path to PATH
#echo "Checking if ${vadebinpath} is in PATH.."
if [ -d "${vadebinpath}" ] && [[ ":$PATH:" != *":${vadebinpath}:"* ]]; then
#    echo "Adding ${vadebinpath} to PATH"
    PATH="${PATH:+"$PATH:"}${vadebinpath}"
fi

# add vade autocompletion
#echo "Setting up '${vade}' autocompletion"
_vade()
{
    local cur opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    opts=$(vade complete)
    COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
    return 0
}
complete -o nospace -F _vade ${vade}

unset vadecalled vadebin vadefull vaderoot vade vadebinpath

fi
#echo "The end, good bye!"

#!/bin/bash

#    Vade - Tool for managing C/C++ source code using GNU Make
#    Copyright (C) 2017  Nicolas Sauzede <nsauzede@laposte.net>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

vadecalled=$_
#echo "Testing if script is being sourced.."
if [ $vadecalled != $0 ]; then
#echo "Script is being sourced"
#echo "\$BASH_SOURCE ${BASH_SOURCE[@]}"

#echo "_=$vadecalled 0=$0"

vadebin=${BASH_SOURCE}
vadefull=$(realpath `readlink ${vadebin} || echo ${vadebin}`)
vaderoot=`dirname ${vadefull}`
#vade=`basename ${vadefull}`
vade=vade
vadebinpath=${vaderoot}

# add vade program path to PATH
#echo "Checking if ${vadebinpath} is in PATH.."
if [ -d "${vadebinpath}" ] && [[ ":$PATH:" != *":${vadebinpath}:"* ]]; then
#	echo "Adding ${vadebinpath} to PATH"
	PATH="${PATH:+"$PATH:"}${vadebinpath}"
fi

# add vade autocompletion
#echo "Setting up '${vade}' autocompletion"
_vade()
{
	local cur opts
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	opts=$(vade complete)
	COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
	return 0
}
complete -o nospace -F _vade ${vade}

unset vadecalled vadebin vadefull vaderoot vade vadebinpath

#echo "Fall through to the end of file !"
else

VADEHELP="help"
VADEBUILD="build"
VADECLEAN="clean"
VADETEST="test"
VADECMDS="$VADEHELP $VADECLEAN $VADEBUILD $VADETEST"

VADEBIN=$0
VADECMD=$1

if [ "x${VADECMD}" = "xcomplete" ]; then
	echo "$VADECMDS"
	exit 0
fi

#echo "Script is a subshell CMD=$VADECMD"
#exit 0

VADEFULL=$(realpath `readlink ${VADEBIN} || echo ${VADEBIN}`)
VADEROOT=`dirname ${VADEFULL}`
#VADE=`basename ${VADEFULL}`
VADE=vade
VADEBINPATH=${VADEROOT}
#VADEBIN="$vadebin"
#VADEFULL="$vadefull"
#VADEROOT="$vaderoot"
#VADE="$vade"
#VADEBINPATH="$vaderoot"

# If VADEPATH is not defined, try to autodetect..
# 1) try current git root, 2) try ${HOME}/vade
: ${VADEPATH:=`git rev-parse --show-toplevel 2> /dev/null || echo ${HOME}/vade`}
# Else 3) fallback to vade root itself.
if [ ! -d "${VADEPATH}" ]; then
	VADEPATH=${VADEROOT}
fi

#echo "VADEBIN=${VADEBIN}"
#echo "VADECMD=${VADECMD}"
#echo "VADEFULL=${VADEFULL}"
#echo "VADEROOT=${VADEROOT}"
#echo "VADE=${VADE}"
#echo "VADEBINPATH=${VADEBINPATH}"
#echo "VADEPATH=${VADEPATH}"

#SILENCEMAKE=-s
SILENCEMAKE=--no-print-directory

#if [ "x${VADECMD}" = "x${VADECOMPLETE}" ]; then
#	echo "${VADECMDS}"
#	exit 0
#elif [ "x${VADECMD}" != "x" ]; then
if [ "x${VADECMD}" != "x" ]; then
#	VADECMD="help"
#else
	shift
	VADESUBCMD=$1
	VADEARGS=$*
fi

#echo "VADESUBCMD=${VADESUBCMD}"
#echo "VADEARGS=${VADEARGS}"

case ${VADECMD} in
"" | ${VADEHELP}) :
	case ${VADESUBCMD} in
	"") :
		echo -e "Vade is a tool for managing gcc* source code. (*C, C++, assembly, etc..)"
		echo -e ""
		echo -e "Usage:"
		echo -e ""
		echo -e "\t${VADE} command [arguments]"
		echo -e ""
		echo -e "The commands are:"
		echo -e ""
		echo -e "\t${VADEBUILD}\tcompile packages and dependencies"
		echo -e "\t${VADECLEAN}\tremove object files"
		echo -e "\t${VADETEST}\ttest packages"
		echo -e ""
		if [ "x${VADECMD}" = "xhelp" ]; then
			exit 0
		else
			exit 2
		fi
		;;
	${VADEBUILD}) :
		echo "Usage: ${VADE} ${VADESUBCMD} [-o output] [-i] [build flags] [packages]"
		echo ""
		exit 0
		;;
	${VADECLEAN}) :
		echo "Usage: ${VADE} ${VADESUBCMD} [-i] [-r] [-n] [-x] [build flags] [packages]"
		echo ""
		exit 0
		;;
	${VADETEST}) :
		echo "Usage: ${VADE} ${VADESUBCMD} [build/test flags] [packages] [build/test flags & test binary flags]"
		echo ""
		exit 0
		;;
	*) :
		echo "Unknown help topic `${VADESUBCMD}`.  Run '${VADE} help'."
		echo ""
		exit 2
		;;
	esac
	;;
esac

test -d ${VADEPATH} || (echo "can't load package: package .: no buildable source files in ${VADEPATH}" ; exit 1)

case ${VADECMD} in
${VADEBUILD}) :
	make ${SILENCEMAKE} -C ${VADEPATH} -f ${VADEROOT}/Makefile all ${VADEARGS}
	;;
${VADECLEAN}) :
	make ${SILENCEMAKE} -C ${VADEPATH} -f ${VADEROOT}/Makefile clobber ${VADEARGS}
	;;
${VADETEST}) :
	make ${SILENCEMAKE} -C ${VADEPATH} -f ${VADEROOT}/Makefile check ${VADEARGS}
	;;
*) :
	echo "${VADE}: unknown command \"${VADECMD}\""
	echo "Run '${VADE} help' for usage."
	echo ""
	exit 2
	;;
esac

fi
#echo "The end, good bye!"
